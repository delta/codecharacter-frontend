/* tslint:disable */
/* eslint-disable */
/**
 * CodeCharacter API
 * Specification of the CodeCharacter API
 *
 * The version of the OpenAPI document: 2024.0.1
 * Contact: delta@nitt.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {
  CreateMatchRequest,
  GenericError,
  Match,
  PvPMatch,
} from '../models';

export interface CreateMatchOperationRequest {
  createMatchRequest: CreateMatchRequest;
}

export interface GetUserNormalMatchesRequest {
  page?: number;
  size?: number;
}

export interface GetUserPvPMatchesRequest {
  page?: number;
  size?: number;
}

/**
 * MatchApi - interface
 *
 * @export
 * @interface MatchApiInterface
 */
export interface MatchApiInterface {
  /**
   * Initiate a match by current user
   * @summary Create match
   * @param {CreateMatchRequest} createMatchRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MatchApiInterface
   */
  createMatchRaw(
    requestParameters: CreateMatchOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>>;

  /**
   * Initiate a match by current user
   * Create match
   */
  createMatch(
    createMatchRequest: CreateMatchRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void>;

  /**
   * Get top matches
   * @summary Get top matches
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MatchApiInterface
   */
  getTopMatchesRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<object>>>;

  /**
   * Get top matches
   * Get top matches
   */
  getTopMatches(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<object>>;

  /**
   * Get normal matches played by authenticated user
   * @summary Get user matches
   * @param {number} [page] Index of the page
   * @param {number} [size] Size of the page
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MatchApiInterface
   */
  getUserNormalMatchesRaw(
    requestParameters: GetUserNormalMatchesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<Match>>>;

  /**
   * Get normal matches played by authenticated user
   * Get user matches
   */
  getUserNormalMatches(
    page?: number,
    size?: number,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<Match>>;

  /**
   * Get pvp matches played by authenticated user
   * @summary Get user pvp matches
   * @param {number} [page] Index of the page
   * @param {number} [size] Size of the page
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MatchApiInterface
   */
  getUserPvPMatchesRaw(
    requestParameters: GetUserPvPMatchesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<PvPMatch>>>;

  /**
   * Get pvp matches played by authenticated user
   * Get user pvp matches
   */
  getUserPvPMatches(
    page?: number,
    size?: number,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<PvPMatch>>;
}

/**
 *
 */
export class MatchApi extends runtime.BaseAPI implements MatchApiInterface {
  /**
   * Initiate a match by current user
   * Create match
   */
  async createMatchRaw(
    requestParameters: CreateMatchOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.createMatchRequest === null ||
      requestParameters.createMatchRequest === undefined
    ) {
      throw new runtime.RequiredError(
        'createMatchRequest',
        'Required parameter requestParameters.createMatchRequest was null or undefined when calling createMatch.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('http-bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/user/matches`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters.createMatchRequest,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Initiate a match by current user
   * Create match
   */
  async createMatch(
    createMatchRequest: CreateMatchRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.createMatchRaw(
      { createMatchRequest: createMatchRequest },
      initOverrides,
    );
  }

  /**
   * Get top matches
   * Get top matches
   */
  async getTopMatchesRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<object>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('http-bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/top-matches`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Get top matches
   * Get top matches
   */
  async getTopMatches(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<object>> {
    const response = await this.getTopMatchesRaw(initOverrides);
    return await response.value();
  }

  /**
   * Get normal matches played by authenticated user
   * Get user matches
   */
  async getUserNormalMatchesRaw(
    requestParameters: GetUserNormalMatchesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<Match>>> {
    const queryParameters: any = {};

    if (requestParameters.page !== undefined) {
      queryParameters['page'] = requestParameters.page;
    }

    if (requestParameters.size !== undefined) {
      queryParameters['size'] = requestParameters.size;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('http-bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/user/matches`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response);
  }

  /**
   * Get normal matches played by authenticated user
   * Get user matches
   */
  async getUserNormalMatches(
    page?: number,
    size?: number,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<Match>> {
    const response = await this.getUserNormalMatchesRaw(
      { page: page, size: size },
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Get pvp matches played by authenticated user
   * Get user pvp matches
   */
  async getUserPvPMatchesRaw(
    requestParameters: GetUserPvPMatchesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<PvPMatch>>> {
    const queryParameters: any = {};

    if (requestParameters.page !== undefined) {
      queryParameters['page'] = requestParameters.page;
    }

    if (requestParameters.size !== undefined) {
      queryParameters['size'] = requestParameters.size;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('http-bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/user/pvpmatches`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response);
  }

  /**
   * Get pvp matches played by authenticated user
   * Get user pvp matches
   */
  async getUserPvPMatches(
    page?: number,
    size?: number,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<PvPMatch>> {
    const response = await this.getUserPvPMatchesRaw(
      { page: page, size: size },
      initOverrides,
    );
    return await response.value();
  }
}
