/* tslint:disable */
/* eslint-disable */
/**
 * CodeCharacter API
 * Specification of the CodeCharacter API
 *
 * The version of the OpenAPI document: 2024.0.1
 * Contact: delta@nitt.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import { TutorialsGetRequest } from '../models';

export interface GetTutorialByNumberRequest {
  tutorialNumber: number;
}

/**
 * TutorialsApi - interface
 *
 * @export
 * @interface TutorialsApiInterface
 */
export interface TutorialsApiInterface {
  /**
   * Get a single tutorial
   * @summary Get tutorial by number
   * @param {number} tutorialNumber
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TutorialsApiInterface
   */
  getTutorialByNumberRaw(
    requestParameters: GetTutorialByNumberRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<TutorialsGetRequest>>;

  /**
   * Get a single tutorial
   * Get tutorial by number
   */
  getTutorialByNumber(
    tutorialNumber: number,
    initOverrides?: RequestInit,
  ): Promise<TutorialsGetRequest>;
}

/**
 *
 */
export class TutorialsApi
  extends runtime.BaseAPI
  implements TutorialsApiInterface
{
  /**
   * Get a single tutorial
   * Get tutorial by number
   */
  async getTutorialByNumberRaw(
    requestParameters: GetTutorialByNumberRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<TutorialsGetRequest>> {
    if (
      requestParameters.tutorialNumber === null ||
      requestParameters.tutorialNumber === undefined
    ) {
      throw new runtime.RequiredError(
        'tutorialNumber',
        'Required parameter requestParameters.tutorialNumber was null or undefined when calling getTutorialByNumber.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('http-bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/codetutorial/get/{tutorialNumber}`.replace(
          `{${'tutorialNumber'}}`,
          encodeURIComponent(String(requestParameters.tutorialNumber)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response);
  }

  /**
   * Get a single tutorial
   * Get tutorial by number
   */
  async getTutorialByNumber(
    tutorialNumber: number,
    initOverrides?: RequestInit,
  ): Promise<TutorialsGetRequest> {
    const response = await this.getTutorialByNumberRaw(
      { tutorialNumber: tutorialNumber },
      initOverrides,
    );
    return await response.value();
  }
}
