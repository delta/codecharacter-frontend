/* tslint:disable */
/* eslint-disable */
/**
 * CodeCharacter API
 * Specification of the CodeCharacter API
 *
 * The version of the OpenAPI document: 2024.0.1
 * Contact: delta@nitt.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';

export interface GetPvpGameLogsByGameIdRequest {
  gameId: string;
}

/**
 * PvpGameApi - interface
 *
 * @export
 * @interface PvpGameApiInterface
 */
export interface PvpGameApiInterface {
  /**
   * Get pvp game logs by game ID
   * @summary Get pvp game logs by game ID
   * @param {string} gameId UUID of the game
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PvpGameApiInterface
   */
  getPvpGameLogsByGameIdRaw(
    requestParameters: GetPvpGameLogsByGameIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<string>>;

  /**
   * Get pvp game logs by game ID
   * Get pvp game logs by game ID
   */
  getPvpGameLogsByGameId(
    gameId: string,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<string>;
}

/**
 *
 */
export class PvpGameApi extends runtime.BaseAPI implements PvpGameApiInterface {
  /**
   * Get pvp game logs by game ID
   * Get pvp game logs by game ID
   */
  async getPvpGameLogsByGameIdRaw(
    requestParameters: GetPvpGameLogsByGameIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<string>> {
    if (
      requestParameters.gameId === null ||
      requestParameters.gameId === undefined
    ) {
      throw new runtime.RequiredError(
        'gameId',
        'Required parameter requestParameters.gameId was null or undefined when calling getPvpGameLogsByGameId.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('http-bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/pvpgames/{gameId}/logs`.replace(
          `{${'gameId'}}`,
          encodeURIComponent(String(requestParameters.gameId)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get('content-type'))) {
      return new runtime.JSONApiResponse<string>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Get pvp game logs by game ID
   * Get pvp game logs by game ID
   */
  async getPvpGameLogsByGameId(
    gameId: string,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<string> {
    const response = await this.getPvpGameLogsByGameIdRaw(
      { gameId: gameId },
      initOverrides,
    );
    return await response.value();
  }
}
